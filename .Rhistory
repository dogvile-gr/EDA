select(cran, ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
select(cran, -5:20)
(-5:20)
-(5:20)
select(cran, -5:10)
select(cran,-(1:10))
select(cran,-(x:size))
-(1:20)
select(cran, -(time,10))
select(cran, -(x,10))
select(cran, -(1,10))
info()
select(cran, -0:10)
select(cran, -size)
select(cran, -(X,size))
select(cran, -1:3)
select(cran, -1:2)
select(cran, -1:4)
select(cran, -0:3)
(-0:3)
-(0:3)
select(cran, -(,0:3)
select(cran, -(,0:3))
select(cran, -(0:3))
select(cran, -(0:4))
select(cran, r_arch:country)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == 'US')
?Comparison
filter(cran, r_version == "3.0.2", country == "US")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == 'IN')
filter(cran, country == "US" | country == "IN")
filter()
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<- select(cran, size:ip_id)
arrange(cran2, ip_id) #variable ip_id will be arranged in an ascending order
arrange(cran2, desc(ip_id)) #desc() stands for 'descending'
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
?tbl_df()
cran <- tbl-df(mydf)
cran <- tbl-df('mydf)
""
''
cv
d
213
)
)
]
]
}
cran %>%
select(ip_id, country, package, size) %>%
omnitest('mutate(cran3, size_mb = size / 2^20)')
swirl
swirl()
library(dply)
library(dplyr)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate()
cran %>%
select(ip_id, country, package, size) %>%
mutate()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
gather(students)
?gather
gather(grade,sex)
gather(students,grade,sex)
gather(students,sex)
gather(students,sex,count)
gather(students,sex,count,-grade)
students2
gather(students2,sex_class,count,-grade)
res <- gather(students2,sex_class,count,-grade)
res
?separate
data = res, col = sex_class, into = c("sex", "class")
data = separate(res, col = sex_class, into = c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
sread()
spread()
spread
spread()
spread
?spread
submit()
submit()
extract_numeric("class5")
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
student4
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
submit()
submit()
submit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
library(ggplot2)
g <- ggplot2(movies, aes(votes, rating))
?lpoints
?xyplot()
?splom()
?trellis.par.set()
?text()
?summmary
()
}
?summary
?summary()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
b1 <- cor(x,y)*sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
?mtcars
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
?solve
setwd("~/GitHub/exploratory data analysis")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
PM25 <- tapply(NEI$Emissions, NEI$year, sum)
png("plot1.png")
plot(names(PM25), PM25, type="l", xlab = "Year", ylab = expression
("Total" ~ PM[2.5] ~"Emissions (tons)"), main = expression("Total US" ~
PM[2.5] ~ "Emissions by Year"), col="green")
dev.off()
plot(names(PM25), PM25, type="l", xlab = "Year", ylab = expression
("Total" ~ PM[2.5] ~"Emissions (tons)"), main = expression("Total US" ~
PM[2.5] ~ "Emissions by Year"), col="green")
plot(names(PM25), PM25, type="l", xlab = "Year", ylab = expression
("Total" ~ PM[2.5] ~"Emissions (tons)"), main = expression("Total US" ~
PM[2.5] ~ "Emissions by Year"), col="coral1")
baltimore <- subset (NEI, fips == "24510")
baltimore_sum <- tapply(baltimore$Emissions, baltimore$year, sum)
baltimore_sum <- tapply(baltimore$Emissions, baltimore$year, sum)
png("plot2.png")
par(pch=26, col="black")
plot(names(baltimore_sum), baltimore_sum, type = "l", xlab="Year", ylab= expression("Total" ~ PM[2.5] ~ "Emissions (tons)"), main=expression("Total for Baltimore City" ~ PM[2.5] ~ "Emissions by Year"), lwd = 2,col="coral1")
plot(names(baltimore_sum), baltimore_sum, type = "l", xlab="Year", ylab= expression("Total" ~ PM[2.5] ~ "Emissions (tons)"), main=expression("Total for Baltimore City" ~ PM[2.5] ~ "Emissions by Year"), lwd = 2,col="coral1")
dev.off()
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
library(plyr)
library(reshape2)
## Step 1: read in the data
baltimore <- subset (NEI, fips == "24510")
PM25 <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
vout <- aggregate(NEI$type,by,FUN=sum)
colnames(PM25)[3] <- "Emissions"
png("plot3.png")
qplot(year, Emissions, data=PM25, color=type, geom ="line") + ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
qplot(year, Emissions, data=PM25, color=type, geom ="line") +
ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) +
xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
dev.off()
qplot(year, Emissions, data=typePM25.year, color=type, geom ="line")
+ ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) + xlab("Year")
+ ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
ggplot(year, Emissions, data=typePM25.year, color=type, geom ="line")
+ ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) + xlab("Year")
+ ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
ggplot(year, Emissions, data=PM25, color=type, geom ="line") +
ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) +
xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
baltimore <- subset (NEI, fips == "24510")
PM25 <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
vout <- aggregate(NEI$type,by,FUN=sum)
# Script Name: plot3.R
## Version: 1.0_14
## Libraries needed:
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
library(plyr)
library(reshape2)
## Step 1: read in the data
NEI <- readRDS("expdata_prj2/summarySCC_PM25.rds")
SCC <- readRDS("expdata_prj2/Source_Classification_Code.rds")
##Of the four types of sources indicated by the type (point, nonpoint, onroad, nonroad) variable, which of these four sources have seen decreases in emissions from 1999â€“2008 for Baltimore City? Which have seen increases in emissions from 1999â€“2008? Use the ggplot2 plotting system to make a plot answer this question.
## Step 2: subset our data
baltimore <- subset (NEI, fips == "24510")
PM25 <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
vout <- aggregate(NEI$type,by,FUN=sum)
install.packages("ggplot2")
install.packages("reshape2")
install.packages("reshape2")
baltimore <- subset (NEI, fips == "24510")
PM25 <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
vout <- aggregate(NEI$type,by,FUN=sum)
## Rename the col: Emissions
colnames(PM25)[3] <- "Emissions"
## Step 3: prepare to plot to png
png("plot3.png")
ggplot(year, Emissions, data=PM25, color=type, geom ="line") +
ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) +
xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
qplot(year, Emissions, data=PM25, color=type, geom ="line") +
ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) +
xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
View(PM25)
qplot(PM25$year, PM25$Emissions, data=PM25, color=type, geom ="line") +
ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) +
xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
dev.off()
View(PM25)
vout <- aggregate(NEI$type,by,FUN=sum)
vout <- aggregate(NEI$type,byby = list(),FUN=sum)
vout <- aggregate(NEI$type,by = list(),FUN=sum)
vout <- aggregate(NEI$type,by=list(NEI$year),FUN=sum)
vout <- aggregate(NEI$type,by=list(PM25),FUN=sum)
vout <- aggregate(PM25,FUN=sum)
vout <- aggregate(PM25,by=list(PM25$year),FUN=sum)
vout <- aggregate(PM25,by=list(PM25),FUN=sum)
vout <- aggregate(PM25,by=list(PM25$Emissions),FUN=sum)
ggplot(PM25, aes(date)) +
geom_line(aes(y = var0, colour = "var0")) +
geom_line(aes(y = var1, colour = "var1"))
ggplot(PM25, aes(date)) +
geom_line(aes(y = PM25$Emissions, colour = "var0")) +
geom_line(aes(y = PM25$Emissions, colour = "var1"))
p <- ggplot(PM25, aes(x = PM25$year, y = PM25$Emissions)
p <- ggplot(PM25, aes(x = PM25$year, y = PM25$Emissions))
ggplot(PM25, aes(x = PM25$year, y = PM25$Emissions))
ggplot(PM25, aes(x = PM25$year, y = PM25$Emissions))
+geom_linerange() + geom_point()
qplot(PM25,
PM25,
data
=
PM25,
color
=
mopos,
geom
=
c("point",
"smooth"),
method
=
"lm")
qplot(PM25,
PM25,
data
=
PM25,
geom
=
c("point",
"smooth"),
method
=
"lm")
# Script Name: plot3.R
## Version: 1.0_14
## Libraries needed:
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
library(plyr)
library(reshape2)
## Step 1: read in the data
NEI <- readRDS("expdata_prj2/summarySCC_PM25.rds")
SCC <- readRDS("expdata_prj2/Source_Classification_Code.rds")
##Of the four types of sources indicated by the type (point, nonpoint, onroad, nonroad) variable, which of these four sources have seen decreases in emissions from 1999â€“2008 for Baltimore City? Which have seen increases in emissions from 1999â€“2008? Use the ggplot2 plotting system to make a plot answer this question.
## Step 2: subset our data
baltimore <- subset (NEI, fips == "24510")
PM25 <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
View(PM25)
colnames(PM25)[3] <- "Emissions"
ggplot(PM25, aes(x=PM25$year, y=PM25$Emissions)) + geom_line()
ggplot(PM25, aes(x=PM25$year, y=PM25$Emissions,linetype=supp)) + geom_line()
ggplot(PM25, aes(x=PM25$year, y=PM25$Emissions,colour=PM25$type, group=PM25$type)) + geom_line()
ggplot(PM25, aes(x=PM25$year, y=PM25$Emissions,colour=PM25$type, group=PM25$type)) + geom_line()
+geom_point(size=4, shape=21)
ggplot(PM25, aes(x=PM25$year, y=PM25$Emissions,colour=PM25$type, group=PM25$type)) + geom_line()+
geom_point(size=4, shape=21)
ggplot(PM25, aes(x=PM25$year, y=PM25$Emissions,colour=PM25$type, group=PM25$type,fill=PM25$type)) +
geom_line()+
geom_point(size=4, shape=21)
py$ggplotly()
install.packages("devtools")  # so we can install from github
library("devtools")
install_github("ropensci/plotly")  # plotly is part of ropensci
library(plotly)
py$ggplotly()
ggplotly()
py <- plotly(username="r_user_guide", key="mw5isa4yqp")  # open plotly
py$ggplotly()
coalcomb <- subset(SCC, EI.Sector %in% c("Fuel Comb - Comm/Instutional - Coal",
"Fuel Comb - Electric Generation - Coal", "Fuel Comb - Industrial Boilers, ICEs -
Coal"))
View(SCC)
View(SCC)
head(SCC)
is.combustion.coal <- grepl("Fuel Comb.*Coal", SCC$EI.Sector)
combustion.coal.sources <- SCC[is.combustion.coal,]
# Find emissions from coal combustion-related sources
emissions <- NEI[(NEI$SCC %in% combustion.coal.sources$SCC), ]
# group by year
emissions.by.year <- aggregate(Emissions ~ year, data=emissions, FUN=sum)
# plot
library(ggplot2)
png("plot4.png")
ggplot(emissions.by.year, aes(x=factor(year), y=Emissions)) +
geom_bar(stat="identity") +
xlab("year") +
ylab(expression("total PM"[2.5]*" emissions")) +
ggtitle("Emissions from coal combustion-related sources")
dev.off()
dev.off()
png("plot4.png")
ggplot(emissions.by.year, aes(x=factor(year), y=Emissions)) +
geom_bar(stat="identity") +
xlab("year") +
ylab(expression("total PM"[2.5]*" emissions")) +
ggtitle("Emissions from coal combustion-related sources")
dev.off()
png("plot4.png")
ggplot(emissions.by.year, aes(x=factor(year), y=Emissions)) +
geom_bar(stat="identity") +
xlab("year") +
ylab(expression("total PM"[2.5]*" emissions")) +
ggtitle("Emissions from coal combustion-related sources")
png("plot4.png")
ggplot(emissions.by.year, aes(x=factor(year), y=emissions)) +
geom_bar(stat="identity") +
xlab("year") +
ylab(expression("total PM"[2.5]*" emissions")) +
ggtitle("Emissions from coal combustion-related sources")
ggplot(emissions.by.year, aes(x=factor(year), y=Emissions)) +
geom_bar(stat="identity") +
xlab("year") +
ylab(expression("total PM"[2.5]*" emissions")) +
ggtitle("Emissions from coal combustion-related sources")
library(plyr)
library(ggplot2)
## Step 1: read in the data
NEI <- readRDS("expdata_prj2/summarySCC_PM25.rds")
SCC <- readRDS("expdata_prj2/Source_Classification_Code.rds")
## Step 2: subset our data for only coal-combustion
coalcomb.scc <- subset(SCC, EI.Sector %in% c("Fuel Comb - Comm/Instutional - Coal",
"Fuel Comb - Electric Generation - Coal", "Fuel Comb - Industrial Boilers, ICEs -
Coal"))
## Step 3: comparisons so that we didn't ommit anything weird
coalcomb.scc1 <- subset(SCC, grepl("Comb", Short.Name) & grepl("Coal", Short.Name))
nrow(coalcomb.scc) #evaluate: rows 0
nrow(coalcomb.scc1) #evaluate: rows 91
## Step 4: set the differences
dif1 <- setdiff(coalcomb.scc$SCC, coalcomb.scc1$SCC)
dif2 <- setdiff(coalcomb.scc1$SCC, coalcomb.scc$SCC)
length(dif1)#0
length(dif2)#91
##Based on other coursera courses and previous history...
###it's time to look at the union of these sets
coalcomb.codes <- union(coalcomb.scc$SCC, coalcomb.scc1$SCC)
length(coalcomb.codes) #91
## Step 5: subset again for what we want
coal.comb <- subset(NEI, SCC %in% coalcomb.codes)
##Step 6: get the PM25 values as well
coalcomb.pm25year <- ddply(coal.comb, .(year, type), function(x) sum(x$Emissions))
#rename the col
colnames(coalcomb.pm25year)[3] <- "Emissions"
##Step 7: finally plot4.png prepare to plot to png
png("plot4.png")
qplot(year, Emissions, data=coalcomb.pm25year, color=type, geom="line") + stat_summary(fun.y = "sum", fun.ymin = "sum", fun.ymax = "sum", color = "purple", aes(shape="total"), geom="line") + geom_line(aes(size="total", shape = NA)) + ggtitle(expression("Coal Combustion" ~ PM[2.5] ~ "Emissions by Source Type and Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
dev.off()
## Step 8: prepare to plot to markdown
qplot(year, Emissions, data=coalcomb.pm25year, color=type, geom="line") + stat_summary(fun.y = "sum", fun.ymin = "sum", fun.ymax = "sum", color = "purple", aes(shape="total"), geom="line") + geom_line(aes(size="total", shape = NA)) + ggtitle(expression("Coal Combustion" ~ PM[2.5] ~ "Emissions by Source Type and Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
qplot(year, Emissions, data=coalcomb.pm25year, color=type, geom="line") + stat_summary(fun.y = "sum", fun.ymin = "sum", fun.ymax = "sum", color = "purple", aes(shape="total"), geom="line") + geom_line(aes(size="total", shape = NA)) + ggtitle(expression("Coal Combustion" ~ PM[2.5] ~ "Emissions by Source Type and Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
qplot(year, Emissions, data=coalcomb.pm25year, color=type, geom="line") + stat_summary(fun.y = "sum", fun.ymin = "sum", fun.ymax = "sum", color = "purple", aes(shape="total"), geom="line") + geom_line(aes(size="total", shape = NA)) + ggtitle(expression("Coal Combustion" ~ PM[2.5] ~ "Emissions by Source Type and Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
png("plot4.png")
qplot(year, Emissions, data=coalcomb.pm25year, color=type, geom="line") + stat_summary(fun.y = "sum", fun.ymin = "sum", fun.ymax = "sum", color = "purple", aes(shape="total"), geom="line") + geom_line(aes(size="total", shape = NA)) + ggtitle(expression("Coal Combustion" ~ PM[2.5] ~ "Emissions by Source Type and Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
coalCombustion <- (combustionRelated & coalRelated)
combustionSCC <- SCC[coalCombustion,]$SCC
combustionNEI <- NEI[NEI$SCC %in% combustionSCC,]
png("plot4.png",width=480,height=480,units="px",bg="transparent")
library(ggplot2)
ggp <- ggplot(combustionNEI,aes(factor(year),Emissions/10^5)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() + guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
print(ggp)
dev.off()
